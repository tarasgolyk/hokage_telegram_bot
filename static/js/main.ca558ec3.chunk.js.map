{"version":3,"sources":["App.module.css","axios/axios-bot.js","telegramSettings.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","create","baseURL","App","state","message","incomingMessage","fromName","fromLastName","replyMessage","fromIdMessage","sendMessage","e","preventDefault","trim","get","chat_id","setState","console","log","sendReplyMessage","id","inputMessage","target","value","inputReplyMessage","getUpdates","a","response","result","data","length","from","first_name","last_name","message_id","text","this","setInterval","cls_btn","classes","Btn","cls_container","Container","fromUser","className","join","style","marginBottom","Color","type","placeholder","name","onChange","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ca558ec3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2OU-9\",\"Btn\":\"App_Btn__3Wm9O\",\"Color\":\"App_Color__22EnY\",\"Container\":\"App_Container__3Fp_a\"};","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://api.telegram.org/bot1078504713:AAF_98VqMImTPtGr1A_4de55foz0XZIPYT8/'\r\n})","export default {\r\n  chat_id: -445137145\r\n}","import React from 'react'\nimport classes from './App.module.css'\nimport axios from './axios/axios-bot'\nimport chat_id from './telegramSettings'\n\nclass App extends React.Component {\n\n  state = {\n    message: '',\n    incomingMessage: '',\n    fromName: '',\n    fromLastName: '',\n    replyMessage: '',\n    fromIdMessage: ''\n  }\n\n  sendMessage = (e) => {\n    e.preventDefault()\n\n    const message = this.state.message.trim()\n\n    if (message !== '') {\n      try {\n        axios.get(`/sendMessage?chat_id=${chat_id.chat_id}&text=${message}`)\n\n        this.setState({message: ''})\n      } catch (e) {\n        console.log(e)\n      }\n    }\n  }\n\n  sendReplyMessage = (e) => {\n    e.preventDefault()\n\n    const message = this.state.replyMessage.trim()\n    const id = this.state.fromIdMessage\n\n    if (message !== '') {\n      try {\n        axios.get(`/sendMessage?chat_id=${chat_id.chat_id}&text=${message}&reply_to_message_id=${id}`)\n\n        this.setState({replyMessage: ''})\n      } catch (e) {\n        console.log(e)\n      }\n    }\n  }\n\n  inputMessage = (e) => {\n    let message = e.target.value\n    this.setState({message})\n  }\n\n  inputReplyMessage = (e) => {\n    let replyMessage = e.target.value\n    this.setState({replyMessage})\n  }\n\n  getUpdates = async () => {\n    try {\n      const response = await axios.get('/getUpdates')\n      const result = response.data.result[response.data.result.length -1]\n\n      console.log('result', result)\n\n      const fromName = result.message.from.first_name\n      const fromLastName = result.message.from.last_name\n      const fromIdMessage = result.message.message_id\n      const incomingMessage = result.message.text\n\n      this.setState({\n        incomingMessage, fromName, fromLastName, fromIdMessage\n      })\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  componentDidMount() {\n    this.getUpdates()\n    setInterval(this.getUpdates, 3000)\n  }\n\n  render() {\n    const cls_btn = ['btn', 'btn-default', classes.Btn]\n    const cls_container = [classes.Container]\n    const fromUser = this.state.fromName + ' '+ this.state.fromLastName\n    return (\n      <div className={classes.App}>\n        <div className={cls_container.join(' ')} style={{marginBottom: 50}}>\n          <h2 className={classes.Color}>Правду і нічого крім правди:</h2>\n          <form>\n            <div className=\"form-group\">\n              <input type=\"text\" className=\"form-control\" id=\"message-text\" placeholder=\"Вали гезде\" name=\"message-text\" value={this.state.message} onChange={this.inputMessage} />\n            </div>\n            <button type=\"submit\" onClick={this.sendMessage} className={cls_btn.join(' ')}>Чпок</button>\n          </form>\n        </div>\n\n        <div className={cls_container.join(' ')}>\n          <h2 className={classes.Color}>Останнє вхідне повідомлення:</h2>\n          <div className={classes.Color}>\n            Від: <strong>{fromUser}</strong> - \"{this.state.incomingMessage}\"\n          </div>\n          <form>\n            <div className=\"form-group\">\n              <input type=\"text\" className=\"form-control\" id=\"message-text\" placeholder={\"Відповідь для \"+fromUser} name=\"message-text\" value={this.state.replyMessage} onChange={this.inputReplyMessage} />\n            </div>\n            <button type=\"submit\" onClick={this.sendReplyMessage} className={cls_btn.join(' ')}>Уяк</button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}